[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "universal-integer-system"
version = "0.1.0"
description = "A comprehensive integer-based communication protocol for distributed systems"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["distributed-systems", "microservices", "status-codes", "event-driven", "pulsar"]
authors = [
    { name = "intXgers.com software design", email = "contact@intxgers.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies only - keep it minimal
dependencies = [
    "structlog>=23.0.0",
]

[project.optional-dependencies]
# Pulsar support (optional - not everyone needs it)
pulsar = [
    "pulsar-client[avro]>=3.0.0",
    "aiohttp>=3.8.0",
    "prometheus-client>=0.15.0",
    "python-json-logger>=2.0.0",
    "cryptography>=40.0.0",
]

# Development dependencies
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",

    # Code quality
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Documentation = "https://github.com/yourusername/universal-integer-system#readme"
Issues = "https://github.com/yourusername/universal-integer-system/issues"
Source = "https://github.com/yourusername/universal-integer-system"

# Hatchling configuration
[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    ".gitignore",
    ".pre-commit-config.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/universal_integer_system"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hatch
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration (Fast Python linter)
[tool.ruff]
line-length = 100
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.isort]
known-first-party = ["universal_integer_system"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=universal_integer_system",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]

# Mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "pulsar.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "prometheus_client.*"
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]